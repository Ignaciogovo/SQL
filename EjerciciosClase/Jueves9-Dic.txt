1Procedimiento para calcular gastos de envio:

CREATE OR ALTER PROCEDURE GastosEnvios @id_pedidos int
as
DECLARE @num1 as varchar(3)
DECLARE @num2 as varchar(2)
select @num1 = LEFT(Cod_postal,3) from Pedidos where Id= @id_pedidos
select @num2 = LEFT(Cod_Postal,2) from Pedidos where Id= @id_pedidos
if @num1 = '410'
begin
	update Pedidos set GastosEnvio=3.99 where Id=@id_pedidos
end
else
	begin
	if @num2 = '41'
		begin
				update Pedidos set GastosEnvio=5.99 where Id=@id_pedidos
		end
	else
		begin
				update Pedidos set GastosEnvio=9.99 where Id=@id_pedidos
		end
	end
GO





Crear trigger con el procedure

CREATE OR ALTER TRIGGER modificacion_pedido
ON pedidos
for update 
as
begin
	DECLARE @num as int
	SELECT @num = id from inserted
if update(cod_postal)
exec GastosEnvios @num 
end










CREATE TRIGGER actualizar total pedidos


CREATE OR ALTER TRIGGER modificacion_total
ON pedidos
for update
as
  DECLARE @num as int
  select @num =id from inserted
if UPDATE(subtotal)
begin
  update Pedidos set Total=SubTotal + GastosEnvio where Id=@num
end
if update(gastosenvio)
begin
  update Pedidos set Total=SubTotal + GastosEnvio where Id=@num
end



	Intenci√≥n de modificar pedidos en linea y total pedidos


	El procedure
	
		CREATE OR ALTER procedure actualizar_total @num int
	as
	declare @num1 as decimal(10,2)
	set @num1 = (select sum(PedidosLinea.Cantidad*PedidosLinea.PrecioVentaUnitario) 
	FROM PedidosLinea
	where IdPedido = @num)
	update Pedidos set subTotal=@num1  where Id =@num
	go





CREATE OR ALTER TRIGGER actualizion_total
ON pedidoslinea
for update
as
begin
declare @var1 as int 
select @var1 = idpedido from inserted
if update(cantidad)
begin
exec actualizar_total @var1
end
if update(PrecioVentaUnitario)
exec actualizar_total @var1
end







INSERT



CREATE OR ALTER TRIGGER insertar_total
ON pedidoslinea
for insert
as
begin
declare @var1 as int 
select @var1 = idpedido from inserted
exec actualizar_total @var1
end

insert PedidosLinea values (1,2,4,1.34,4)

