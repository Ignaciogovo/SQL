CREATE TABLE Concesionario(
Codigo INT PRIMARY KEY,
Nombre VARCHAR (30),
Capacidad INT,
Pais VARCHAR (30)
);

CREATE TABLE Modelo_Coche(
Modelo VARCHAR(30) PRIMARY KEY,
Marca VARCHAR (30),
Gama VARCHAR(30),
Precio  NUMBER(7,2)
);

CREATE TABLE Automovil(
Codigo INT PRIMARY KEY,
Modelo_Coche VARCHAR(30),
Codigo_Concesionario INT,
Estado VARCHAR(30),
CONSTRAINT Automovil_Modelo FOREIGN KEY (Modelo_Coche) REFERENCES Modelo_Coche(Modelo),
CONSTRAINT Automovil_Concesionario FOREIGN KEY (Codigo_Concesionario) REFERENCES Concesionario(Codigo)
);

CREATE TABLE Cliente(
Codigo INT PRIMARY KEY,
Nombre_Apellidos VARCHAR (15),
Nacionalidad VARCHAR (15)
);

CREATE TABLE Venta(
Codigo_cliente INT,
Codigo_automovil INT,
PRIMARY KEY(Codigo_cliente,Codigo_automovil),
CONSTRAINT Venta_Automovil FOREIGN KEY (Codigo_automovil) REFERENCES Automovil(Codigo),
CONSTRAINT Venta_Cliente FOREIGN KEY (Codigo_Cliente) REFERENCES Cliente(Codigo)
);


------------------------------------------------------------------------------------------

INSERT INTO Concesionario(Codigo,Nombre, Capacidad, Pais) VALUES (1, 'Santa Maria', 5, 'España');
INSERT INTO Concesionario(Codigo,Nombre, Capacidad, Pais) VALUES (2, 'San Fernando', 2, 'España');
INSERT INTO Concesionario(Codigo,Nombre, Capacidad, Pais) VALUES (3, 'Santa Julieta', 4, 'Francia');

INSERT INTO Cliente(Codigo,Nombre_Apellidos, Nacionalidad) VALUES (1, 'Antonio Garrido', 'España');
INSERT INTO Cliente(Codigo,Nombre_Apellidos, Nacionalidad) VALUES (2, 'Fran Campos', 'España');
INSERT INTO Cliente(Codigo,Nombre_Apellidos, Nacionalidad) VALUES (3, 'Manuel Fenandez', 'Francia');
INSERT INTO Cliente(Codigo,Nombre_Apellidos, Nacionalidad) VALUES (4, 'Julia Orozco', 'Italia');

INSERT INTO Modelo_Coche(Modelo, Marca, Gama, Precio) VALUES ('Clio', 'Renault', 'Baja', 14000.00);
INSERT INTO Modelo_Coche(Modelo, Marca, Gama, Precio) VALUES ('A8', 'Audi','Alta', 60000.00);
INSERT INTO Modelo_Coche(Modelo, Marca, Gama, Precio) VALUES ('Q3', 'Audi','Baja', 30000.00);
INSERT INTO Modelo_Coche(Modelo, Marca, Gama, Precio) VALUES ('Megan', 'Renault', 'Baja', 20000.00);
INSERT INTO Modelo_Coche(Modelo, Marca, Gama, Precio) VALUES ('Panamera', 'Porche','Alta', 85000.00);

INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (5, 'Clio', 1,'No disponible');
INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (2,'A8', 1,'Reparacion');
INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (3, 'Q3', 2,'Disponible');
INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (4, 'Q3', 1,'Disponible');
INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (5, 'Clio', 1,'No disponible');
INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (6, 'Megan', 3, 'Disponible');
INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (7, 'Panamera', 2, 'Disponible');
INSERT INTO Automovil(Codigo,Modelo_Coche, Codigo_Concesionario,Estado) VALUES (8, 'Megan', 3,'Reparacion');
-----------------------------------------------------------------------------------------
EXAMEN 
1. Un procedimiento que introduzca un automovil dado su codigo, su modelo, su concesionario. Su estado será siempre Disponible.
CREATE OR REPLACE PROCEDURE nuevo_automovil ( a in INT, b in VARCHAR, c in INT) 
IS
BEGIN
INSERT INTO automovil VALUES (a,b,c,'disponible');
END;
/
SET SERVEROUTPUT ON
DECLARE
a int:=&IntroduzcaCodigo;
b VARCHAR(30):=&IntroduceCodigoModelocoche;
c int:=&IntroduceConcesionario;
BEGIN
nuevo_automovil(a,b,c);
end;
/
2. Un procedimiento que realize lo siguiente : Si el modelo del coche cuyo codigo sea de gama baja realice un descuento del 20%  y a los de gama alta del 10%.
CREATE OR REPLACE FUNCTION Saber_gama( a in varchar)RETURN varchar
is
b VARCHAR(30);
BEGIN
SELECT lower(gama) INTO b
FROM modelo_coche
WHERE lower(modelo)=lower(a);
RETURN (b);
END;
/

CREATE OR REPLACE PROCEDURE Descuento_Modelo( a in VARCHAR) 
IS
b VARCHAR(30);
c int;
BEGIN
b:=saber_gama(a);
SELECT precio INTO c
FROM modelo_coche
WHERE lower(modelo)=lower(a);
if b = 'baja' then
c:=c*0.80;
ELSIF b = 'alta' then
c:=c*0.90;
end if;
UPDATE modelo_coche SET  precio=c where lower(modelo)=lower(a);
END;
/
SET SERVEROUTPUT ON
DECLARE
a VARCHAR(30):=&IntroduceCodigoModelocoche;
BEGIN
Descuento_Modelo(a);
end;
/
3. Un procedimiento que cambie el estado de un automovil a No disponible dado el codigo del automovil.
CREATE OR REPLACE PROCEDURE MODIFICAR_ESTADOAutomovil (a in int)
is     		
Begin
UPDATE automovil SET  estado='No disponible' where codigo=a;
END;
/
SET SERVEROUTPUT ON
DECLARE
a int:=&IntroduzcaCodigoAutomovil;
BEGIN
MODIFICAR_ESTADOAutomovil(a);
end;
/
4. Una funcion que devuelva 1 si el estado del automovil es Disponible y 0 sino lo es.
CREATE OR REPLACE FUNCTION estado_automovil (a in int) RETURN INT
is
b VARCHAR(20);
c int;
begin
SELECT lower(estado) INTO b
FROM automovil
WHERE codigo=a;
if b = 'disponible' then
c:=1;
else
c:=0;
end if;
RETURN(c);
END;
/
SET SERVEROUTPUT ON
DECLARE
a int:=&IntroduzcaCodigoAutomovil;
d int;
BEGIN
d:=estado_automovil(a);
DBMS_OUTPUT.put_line(d);
end;
/
5. Una funcion que devuelva cuantos automoviles disponibles de un mismo modelo hay.
CREATE OR REPLACE FUNCTION Numero_automoviles (a in VARCHAR) RETURN INT
is
b INT;
begin
SELECT Count(*) INTO b
FROM automovil
WHERE lower(modelo_coche)=lower(a) and lower(estado)='disponible';

RETURN(b);
END;
/
SET SERVEROUTPUT ON
DECLARE
a VARCHAR(20):=&IntroduzcaCodigoAutomovil;
d int;
BEGIN
d:=Numero_automoviles (a);
DBMS_OUTPUT.put_line(d);
end;
/
6. Un procedimiento que introduza una venta dado el codigo del cliente y el codigo del automovil. Comprobar que se puede realizar la venta. Una vez realizada la venta modificar lo que sea necesario.
CREATE OR REPLACE Procedure venta_disponibilidad (a IN INT, b IN INT)
is
c int;
BEGIN
c:=estado_automovil(a);
if c = 1 then
INSERT INTO venta VALUES (b,a);
UPDATE automovil SET  estado='Vendido' where codigo=a;
else
DBMS_OUTPUT.put_line('No se puede');
end if;
END;
/
SET SERVEROUTPUT ON
DECLARE
a int:=&CodigoAuto;
b int:=&CodigoCliente;
BEGIN
venta_disponibilidad (a,b);
end;
/

7. Una funcion que devuelva 1 si dado un numero sus divisores son todos primos y 0 si uno no lo es. Para comprobar que son primos puedes usar la funcion esPrimo()

CREATE OR REPLACE FUNCTION esPrimo(a in int) return int
as
b int;
c int:=1;
i int;
begin
for i in 2 .. a-1 LOOP
b:=mod(a,i);
if b = 0 then
c:=0;
end if;
end loop;
return (c);
END;
/



CREATE OR REPLACE FUNCTION divisibles_primos45(a in int) return int
as
b int;
c int:=0;
d int;
e int:=1;
h int;
begin
for i in 2 .. a-1 LOOP
b:=mod(a,i);
if b = 0 then
h:=i;
d:=esPrimo(h);
if d = 0 then
e:=0;
exit;
end if;
end if;
end loop;
return (e);
END;
/
SET SERVEROUTPUT ON
DECLARE
a int:=&IntroduzcaCodigoAutomovil;
d int;
begin
d:=divisibles_primos45(a);
DBMS_OUTPUT.put_line(d);
end;
/

2.5 puntos cada una

